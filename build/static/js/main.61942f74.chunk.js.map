{"version":3,"sources":["serviceWorker.js","components/card.js","components/cardList.js","components/scroll.js","components/searchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","cardComponents","map","user","index","card","key","Scroll","style","overflowY","border","height","children","SearchBox","onSearchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","bind","assertThisInitialized","event","setState","target","value","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","searchBox","components_scroll","cardList","_this2","fetch","then","response","json","users","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yGCFSC,EAdF,SAACC,GAAQ,IACdC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAYF,EAANG,GAClB,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,iBAA+CS,IAAI,WAC3DN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCkBOS,EAvBE,SAACX,GAAQ,IAElBY,EAAUZ,EAAVY,OACDC,EAAiBD,EAAOE,IAAI,SAACC,EAAKC,GACvC,OACCZ,EAAAC,EAAAC,cAACW,EAAD,CACCC,IAAKN,EAAOI,GAAOb,GACnBA,GAAIS,EAAOI,GAAOb,GAClBF,KAAMW,EAAOI,GAAOf,KACpBC,MAAOU,EAAOI,GAAOd,UAKxB,OAEAE,EAAAC,EAAAC,cAAA,WACEO,ICXYM,EATA,SAACnB,GAEf,OACCI,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC9DvB,EAAMwB,WCaKC,EAjBG,SAACzB,GAAQ,IACnB0B,EAAkB1B,EAAlB0B,eAEP,OACCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAChBH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVoB,KAAK,SACLC,YAAY,gBACZC,SAAYH,MC8DAI,cAlEd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAO,CACX1B,OAAO,GACP2B,YAAY,IAGbR,EAAKL,eAAiBK,EAAKL,eAAec,KAApBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KARVA,8EAWEW,GAWdR,KAAKS,SAAS,CAACJ,YAAYG,EAAME,OAAOC,yCAGjC,IAAAC,EAEsBZ,KAAKI,MAA3B1B,EAFAkC,EAEAlC,OAAO2B,EAFPO,EAEOP,YACRQ,EAAiBnC,EAAOoC,OAAO,SAAAC,GACpC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASZ,EAAYW,iBAGrD,OAAQtC,EAAOwC,OAIfhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAEdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC+C,EAAD,CAAW3B,eAAkBQ,KAAKR,eAAgBa,YAAeL,KAAKK,cACtEnC,EAAAC,EAAAC,cAACgD,EAAD,KACClD,EAAAC,EAAAC,cAACiD,EAAD,CAAU3C,OAAQmC,MAPpB3C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,0DAgBiB,IAAAiD,EAAAtB,KAElBuB,MAAM,8CAELC,KAAK,SAAAC,GAEL,OAAOA,EAASC,SAEdF,KAAK,SAAAG,GACPL,EAAKb,SAAS,CAAC/B,OAAOiD,aA7DPC,aCElBC,IAASC,OAER5D,EAAAC,EAAAC,cAAC2D,EAAD,MAECC,SAASC,eAAe,SNsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMZ,KAAK,SAAAa,GACjCA,EAAaC","file":"static/js/main.61942f74.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props)=>{\r\n\tconst {name,email,id} = props;\r\n\treturn(\r\n\r\n\t\t<div className=\"tc dib bg-light-green br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${name}?size=200x200`} alt='robots' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\n//我的心情 #00ff00\r\n\r\nconst CardList = (props)=>{\r\n\r\n\tconst {robots} = props;\r\n\tconst cardComponents = robots.map((user,index)=>{\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\t\tkey={robots[index].id} \r\n\t\t\t\tid={robots[index].id} \r\n\t\t\t\tname={robots[index].name} \r\n\t\t\t\temail={robots[index].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\r\n\t<div>\r\n\t\t{cardComponents}\r\n\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',border:\"1px solid black\",height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = (props)=>{\r\n\tconst {onSearchChange} = props;\r\n\t\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search robots\" \r\n\t\t\tonChange = {onSearchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from '../components/cardList';\r\nimport Scroll from '../components/scroll';\r\nimport SearchBox from '../components/searchBox';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\r\n\t\tthis.state ={\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\r\n\t\tthis.onSearchChange = this.onSearchChange.bind(this);\r\n\t}\r\n\r\n\tonSearchChange(event) {\r\n\r\n\t\t//Alternatively, use onSearchChange = (event)=>{}\r\n\t\t//By doing this you don't need to bind 'this' to onSearchChange in the constructor()\r\n\t\t//Because arrow function doesn not generate its own scope, it will instead use\r\n\t\t//its parent scope as its scope (?)\r\n\t\t//Whereas a regualr function(event) has its own scope hence the 'this' in\r\n\t\t//this.setStae will refer to to function(event) which is undefined, there's nothing in the function\r\n\r\n\t\t//Have to do this when changing state in React\r\n\t\t//Can't do this.state.searchField = ..\r\n\t\tthis.setState({searchField:event.target.value});\t\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tconst {robots,searchField} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\r\n\t\t\treturn !robots.length ?\r\n\r\n\t\t\t<h1 className='f1 tc'>Loading...</h1> :\r\n\r\n\t\t\t<div className='tc'>\r\n\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox onSearchChange = {this.onSearchChange} searchField = {this.searchField}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</Scroll>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t;\r\n\t\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\r\n\t\t.then(response=>{\r\n\r\n\t\t\treturn response.json();\r\n\r\n\t\t}).then(users=>{\r\n\t\t\tthis.setState({robots:users});\r\n\t\t});\r\n\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(\n\n\t<App/>\n\n\t,document.getElementById('root')\n\n\t);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}